package com.example.pdfproject.PdfFacture;

import com.itextpdf.forms.PdfAcroForm;
import com.itextpdf.forms.fields.PdfFormField;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfReader;
import com.itextpdf.kernel.pdf.PdfWriter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Service;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.time.Instant;
import java.util.Map;
import java.util.Optional;

@Service
public class PdfSouscription {

    @Autowired
    private SubscriptionRepository subscriptionRepository;

    // Mémorisation du modèle PDF
    private byte[] cachedTemplate;

    public byte[] generatePdf(int factureId) {
        Instant start = Instant.now();

        Optional<Subscription> factureOpt = subscriptionRepository.findById(factureId);

        if (factureOpt.isEmpty()) {
            System.err.println("Facture non trouvée pour ID: " + factureId);
            throw new RuntimeException("Facture non trouvée");
        }

        Subscription facture = factureOpt.get();
        System.out.println("Facture trouvée: " + facture);

        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/YYYY");
        String formattedDate = (facture.getDateFacture() != null) ? dateFormat.format(facture.getDateFacture()) : "";

        Map<String, String> data = Map.of(
                "client", facture.getNomClient(),
                "MtFacture", facture.getMtFacture() != null ? facture.getMtFacture().toString() : "",
                "dateFacture", formattedDate,
                "Adresse", facture.getAdresse(),
                "codeVille", facture.getCodeville(),
                "numCompte", facture.getNumcompte(),
                // Ajouter le sexe au modèle
                "checkbox_1_Homme", facture.getSexe() != null && facture.getSexe().equals("Homme") ? "Yes" : "Off",
                "checkbox_1_Femme", facture.getSexe() != null && facture.getSexe().equals("Femme") ? "Yes" : "Off"
        );

        System.out.println("Données à insérer dans le PDF: " + data);

        try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
             InputStream templateStream = getTemplateStream();
             PdfReader reader = new PdfReader(templateStream);
             PdfWriter writer = new PdfWriter(outputStream);
             PdfDocument pdfDoc = new PdfDocument(reader, writer)) {

            PdfAcroForm form = PdfAcroForm.getAcroForm(pdfDoc, true);
            Map<String, PdfFormField> fields = form.getFormFields();

            data.forEach((key, value) -> {
                PdfFormField field = fields.get(key);
                if (field != null) {
                    // Vérifier si le champ est une case à cocher
                    if (field.getValueAsString().equals("Yes") || field.getValueAsString().equals("Off")) {
                        field.setValue(value.equals("Yes") ? "Yes" : "Off");
                    } else {
                        field.setValue(value);
                    }
                } else {
                    System.err.println("Champ non trouvé dans le formulaire: " + key);
                }
            });

            form.flattenFields();

            pdfDoc.close();
            byte[] pdfBytes = outputStream.toByteArray();

            Instant end = Instant.now();
            Duration duration = Duration.between(start, end);
            System.out.println("Temps de génération du PDF: " + duration.toMillis() + " ms");

            return pdfBytes;
        } catch (IOException e) {
            e.printStackTrace();
            throw new RuntimeException("Erreur lors de la génération du PDF", e);
        }
    }

    private InputStream getTemplateStream() throws IOException {
        if (cachedTemplate == null) {
            cachedTemplate = new ClassPathResource("rib.pdf").getInputStream().readAllBytes();
        }
        return new ByteArrayInputStream(cachedTemplate);
    }
}
